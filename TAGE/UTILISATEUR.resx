<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        oHqAWANrNfaYRxTljSdnObYhFFFGAH//2Q==
</value>
  </data>
</root>